Index: lib/providers/people_provider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport 'package:cortex_ai_gallery/models/person.dart';\r\nimport 'package:cortex_ai_gallery/services/api_service.dart';\r\n\r\nclass PeopleProvider with ChangeNotifier {\r\n  final ApiService _apiService;\r\n\r\n  List<Person> _people = [];\r\n  List<Person> get people => _people;\r\n\r\n  bool _isLoading = true;\r\n  bool get isLoading => _isLoading;\r\n\r\n  PeopleProvider(this._apiService) {\r\n    fetchPeople();\r\n  }\r\n\r\n  Future<void> fetchPeople() async {\r\n    _isLoading = true;\r\n    notifyListeners();\r\n\r\n    _people = await _apiService.getPeople();\r\n\r\n    _isLoading = false;\r\n    notifyListeners();\r\n  }\r\n\r\n  // ADDED: A refresh method for programmatic updates\r\n  Future<void> refresh() async {\r\n    // We don't set loading to true here to make the refresh smoother\r\n    _people = await _apiService.getPeople();\r\n    notifyListeners();\r\n  }\r\n\r\n  Future<bool> updatePersonName(String personId, String newName) async {\r\n    final index = _people.indexWhere((p) => p.personId == personId);\r\n    if (index == -1) return false;\r\n\r\n    final oldPerson = _people[index];\r\n    final newPerson = Person(\r\n      personId: oldPerson.personId,\r\n      name: newName,\r\n      faceCount: oldPerson.faceCount,\r\n      coverThumbnailUrl: oldPerson.coverThumbnailUrl,\r\n    );\r\n\r\n    _people[index] = newPerson;\r\n    notifyListeners();\r\n\r\n    final success = await _apiService.updatePersonName(personId, newName);\r\n    if (!success) {\r\n      _people[index] = oldPerson;\r\n      notifyListeners();\r\n    }\r\n    return success;\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/providers/people_provider.dart b/lib/providers/people_provider.dart
--- a/lib/providers/people_provider.dart	(revision 65f9e8488518a7c21e511167de144bbcd47903b9)
+++ b/lib/providers/people_provider.dart	(date 1756713301994)
@@ -31,27 +31,4 @@
     _people = await _apiService.getPeople();
     notifyListeners();
   }
-
-  Future<bool> updatePersonName(String personId, String newName) async {
-    final index = _people.indexWhere((p) => p.personId == personId);
-    if (index == -1) return false;
-
-    final oldPerson = _people[index];
-    final newPerson = Person(
-      personId: oldPerson.personId,
-      name: newName,
-      faceCount: oldPerson.faceCount,
-      coverThumbnailUrl: oldPerson.coverThumbnailUrl,
-    );
-
-    _people[index] = newPerson;
-    notifyListeners();
-
-    final success = await _apiService.updatePersonName(personId, newName);
-    if (!success) {
-      _people[index] = oldPerson;
-      notifyListeners();
-    }
-    return success;
-  }
 }
\ No newline at end of file
Index: lib/screens/main/people_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:cortex_ai_gallery/providers/people_provider.dart';\r\nimport 'package:cortex_ai_gallery/providers/settings_provider.dart';\r\nimport 'package:cortex_ai_gallery/screens/main/person_media_page.dart';\r\nimport 'package:cortex_ai_gallery/widgets/cached_image_widget.dart';\r\n\r\nclass PeoplePage extends StatelessWidget {\r\n  const PeoplePage({super.key});\r\n\r\n  Future<void> _showRenameDialog(\r\n      BuildContext context, Person person, PeopleProvider provider) async {\r\n    final controller = TextEditingController(text: person.name);\r\n    final newName = await showDialog<String>(\r\n      context: context,\r\n      builder: (context) {\r\n        return AlertDialog(\r\n          title: const Text('Rename Person'),\r\n          content: TextField(\r\n            controller: controller,\r\n            autofocus: true,\r\n            decoration: const InputDecoration(hintText: 'Enter new name'),\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              onPressed: () => Navigator.of(context).pop(),\r\n              child: const Text('Cancel'),\r\n            ),\r\n            TextButton(\r\n              onPressed: () {\r\n                Navigator.of(context).pop(controller.text);\r\n              },\r\n              child: const Text('Save'),\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n\r\n    if (newName != null && newName.isNotEmpty && newName != person.name) {\r\n      final success = await provider.updatePersonName(person.personId, newName);\r\n      if (context.mounted && !success) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text('Failed to update name.')),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final settings = Provider.of<SettingsProvider>(context);\r\n    final peopleProvider = Provider.of<PeopleProvider>(context);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(title: const Text('People')),\r\n      // The Consumer widget will now correctly rebuild when data arrives\r\n      body: Consumer<PeopleProvider>(\r\n        builder: (context, provider, child) {\r\n          if (provider.isLoading) {\r\n            return const Center(child: CircularProgressIndicator());\r\n          }\r\n\r\n          // Wrap the grid in a RefreshIndicator\r\n          return RefreshIndicator(\r\n            onRefresh: () => provider.refresh(),\r\n            child: provider.people.isEmpty\r\n                ? const Center(child: Text('No people found yet.')) // Show message if list is empty\r\n                : GridView.builder(\r\n              padding: const EdgeInsets.all(8.0),\r\n              itemCount: provider.people.length,\r\n              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\r\n                crossAxisCount: settings.gridSize > 2 ? settings.gridSize - 1 : 2,\r\n                crossAxisSpacing: 8.0,\r\n                mainAxisSpacing: 8.0,\r\n              ),\r\n              itemBuilder: (context, index) {\r\n                final person = provider.people[index];\r\n                return GestureDetector(\r\n                  onTap: () {\r\n                    Navigator.push(\r\n                      context,\r\n                      MaterialPageRoute(\r\n                        builder: (context) => PersonMediaPage(\r\n                          personId: person.personId,\r\n                          personName: person.name,\r\n                        ),\r\n                      ),\r\n                    );\r\n                  },\r\n                  onLongPress: () {\r\n                    _showRenameDialog(context, person, provider);\r\n                  },\r\n                  child: Card(\r\n                    clipBehavior: Clip.antiAlias,\r\n                    child: GridTile(\r\n                      footer: GridTileBar(\r\n                        backgroundColor: Colors.black45,\r\n                        title: Text(person.name),\r\n                        subtitle: Text('${person.faceCount} photos'),\r\n                      ),\r\n                      child:\r\n                          CachedImageWidget(imageUrl: person.coverThumbnailUrl),\r\n                    ),\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/main/people_page.dart b/lib/screens/main/people_page.dart
--- a/lib/screens/main/people_page.dart	(revision 65f9e8488518a7c21e511167de144bbcd47903b9)
+++ b/lib/screens/main/people_page.dart	(date 1756713302011)
@@ -8,45 +8,6 @@
 class PeoplePage extends StatelessWidget {
   const PeoplePage({super.key});
 
-  Future<void> _showRenameDialog(
-      BuildContext context, Person person, PeopleProvider provider) async {
-    final controller = TextEditingController(text: person.name);
-    final newName = await showDialog<String>(
-      context: context,
-      builder: (context) {
-        return AlertDialog(
-          title: const Text('Rename Person'),
-          content: TextField(
-            controller: controller,
-            autofocus: true,
-            decoration: const InputDecoration(hintText: 'Enter new name'),
-          ),
-          actions: [
-            TextButton(
-              onPressed: () => Navigator.of(context).pop(),
-              child: const Text('Cancel'),
-            ),
-            TextButton(
-              onPressed: () {
-                Navigator.of(context).pop(controller.text);
-              },
-              child: const Text('Save'),
-            ),
-          ],
-        );
-      },
-    );
-
-    if (newName != null && newName.isNotEmpty && newName != person.name) {
-      final success = await provider.updatePersonName(person.personId, newName);
-      if (context.mounted && !success) {
-        ScaffoldMessenger.of(context).showSnackBar(
-          const SnackBar(content: Text('Failed to update name.')),
-        );
-      }
-    }
-  }
-
   @override
   Widget build(BuildContext context) {
     final settings = Provider.of<SettingsProvider>(context);
@@ -88,9 +49,6 @@
                       ),
                     );
                   },
-                  onLongPress: () {
-                    _showRenameDialog(context, person, provider);
-                  },
                   child: Card(
                     clipBehavior: Clip.antiAlias,
                     child: GridTile(
Index: lib/screens/main/all_media_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:io';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport 'package:file_picker/file_picker.dart';\r\nimport 'package:crypto/crypto.dart';\r\nimport 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\r\nimport 'package:cortex_ai_gallery/providers/media_provider.dart';\r\nimport 'package:cortex_ai_gallery/providers/people_provider.dart';\r\nimport 'package:cortex_ai_gallery/providers/settings_provider.dart';\r\nimport 'package:cortex_ai_gallery/screens/main/media_viewer_page.dart';\r\nimport 'package:cortex_ai_gallery/services/api_service.dart';\r\nimport 'package:cortex_ai_gallery/widgets/cached_image_widget.dart';\r\n\r\nclass AllMediaPage extends StatefulWidget {\r\n  const AllMediaPage({super.key});\r\n\r\n  @override\r\n  State<AllMediaPage> createState() => _AllMediaPageState();\r\n}\r\n\r\nclass _AllMediaPageState extends State<AllMediaPage> {\r\n  final ScrollController _scrollController = ScrollController();\r\n  bool _isUploading = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    final mediaProvider = Provider.of<MediaProvider>(context, listen: false);\r\n    _scrollController.addListener(() {\r\n      if (_scrollController.position.pixels >= _scrollController.position.maxScrollExtent - 300) {\r\n        mediaProvider.fetchMedia();\r\n      }\r\n    });\r\n  }\r\n\r\n  Future<String> _calculateHash(File file) async {\r\n    final stream = file.openRead();\r\n    final hash = await sha256.bind(stream).first;\r\n    return hash.toString();\r\n  }\r\n\r\n  Future<void> _pickAndUploadFiles() async {\r\n    setState(() => _isUploading = true);\r\n\r\n    final result = await FilePicker.platform.pickFiles(\r\n      allowMultiple: true,\r\n      type: FileType.media,\r\n    );\r\n\r\n    if (result != null && result.files.isNotEmpty) {\r\n      final apiService = context.read<ApiService>();\r\n      final filesToUpload = result.paths.map((path) => File(path!)).toList();\r\n\r\n      final hashes = await Future.wait(filesToUpload.map((file) => _calculateHash(file)));\r\n      final fileHashMap = {for (var i = 0; i < hashes.length; i++) hashes[i]: filesToUpload[i]};\r\n\r\n      final neededHashes = await apiService.checkHashes(hashes);\r\n      final neededFiles = neededHashes.map((hash) => fileHashMap[hash]!).toList();\r\n\r\n      if (neededFiles.isNotEmpty) {\r\n        final success = await apiService.uploadFiles(neededFiles);\r\n        if (context.mounted) {\r\n          ScaffoldMessenger.of(context).showSnackBar(\r\n            SnackBar(content: Text(success ? '${neededFiles.length} new file(s) uploaded successfully!' : 'Upload failed.')),\r\n          );\r\n\r\n          if (success) {\r\n            await Future.delayed(const Duration(seconds: 2));\r\n            context.read<MediaProvider>().refresh();\r\n            context.read<PeopleProvider>().refresh();\r\n          }\r\n        }\r\n      } else {\r\n        if (context.mounted) {\r\n          ScaffoldMessenger.of(context).showSnackBar(\r\n            const SnackBar(content: Text('All selected files already exist on the server.')),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (context.mounted) {\r\n      setState(() => _isUploading = false);\r\n    }\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _scrollController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final settings = Provider.of<SettingsProvider>(context);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('All Media'),\r\n        actions: [\r\n          // CORRECTED: Replaced icon to ensure it renders correctly\r\n          if (_isUploading)\r\n            const Padding(\r\n              padding: EdgeInsets.only(right: 16.0),\r\n              child: Center(child: SizedBox(width: 24, height: 24, child: CircularProgressIndicator(strokeWidth: 3))),\r\n            )\r\n          else\r\n            IconButton(\r\n              icon: const Icon(Icons.upload_file), // Using a standard icon\r\n              tooltip: 'Upload from Gallery',\r\n              onPressed: _pickAndUploadFiles,\r\n            ),\r\n        ],\r\n      ),\r\n      body: Consumer<MediaProvider>(\r\n        builder: (context, provider, child) {\r\n          // ... rest of the file is the same\r\n          if (provider.mediaItems.isEmpty && provider.isLoading) {\r\n            return const Center(child: CircularProgressIndicator());\r\n          }\r\n\r\n          return RefreshIndicator(\r\n            onRefresh: () => provider.refresh(),\r\n            child: MasonryGridView.builder(\r\n              controller: _scrollController,\r\n              padding: const EdgeInsets.all(4.0),\r\n              itemCount: provider.mediaItems.length + (provider.hasMore ? 1 : 0),\r\n              gridDelegate: SliverSimpleGridDelegateWithFixedCrossAxisCount(crossAxisCount: settings.gridSize),\r\n              itemBuilder: (context, index) {\r\n                if (index == provider.mediaItems.length) {\r\n                  return const Center(child: Padding(padding: EdgeInsets.all(16.0), child: CircularProgressIndicator()));\r\n                }\r\n                final item = provider.mediaItems[index];\r\n                return GestureDetector(\r\n                  onTap: () {\r\n                    Navigator.push(\r\n                      context,\r\n                      MaterialPageRoute(\r\n                        builder: (context) => MediaViewerPage(\r\n                          mediaUrl: item.mediaUrl,\r\n                          fileType: item.fileType,\r\n                          heroTag: item.id,\r\n                        ),\r\n                      ),\r\n                    );\r\n                  },\r\n                  child: Card(\r\n                    clipBehavior: Clip.antiAlias,\r\n                    child: Hero(\r\n                      tag: item.id,\r\n                      child: CachedImageWidget(imageUrl: item.thumbnailUrl),\r\n                    ),\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/main/all_media_page.dart b/lib/screens/main/all_media_page.dart
--- a/lib/screens/main/all_media_page.dart	(revision 65f9e8488518a7c21e511167de144bbcd47903b9)
+++ b/lib/screens/main/all_media_page.dart	(date 1756713181797)
@@ -7,7 +7,7 @@
 import 'package:cortex_ai_gallery/providers/media_provider.dart';
 import 'package:cortex_ai_gallery/providers/people_provider.dart';
 import 'package:cortex_ai_gallery/providers/settings_provider.dart';
-import 'package:cortex_ai_gallery/screens/main/media_viewer_page.dart';
+import 'package:cortex_ai_gallery/screens/main/photo_view_page.dart';
 import 'package:cortex_ai_gallery/services/api_service.dart';
 import 'package:cortex_ai_gallery/widgets/cached_image_widget.dart';
 
@@ -136,9 +136,8 @@
                     Navigator.push(
                       context,
                       MaterialPageRoute(
-                        builder: (context) => MediaViewerPage(
-                          mediaUrl: item.mediaUrl,
-                          fileType: item.fileType,
+                        builder: (context) => PhotoViewPage(
+                          imageUrl: item.mediaUrl,
                           heroTag: item.id,
                         ),
                       ),
Index: lib/screens/main/media_viewer_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport 'package:photo_view/photo_view.dart';\r\nimport 'package:video_player/video_player.dart';\r\n\r\nclass MediaViewerPage extends StatefulWidget {\r\n\r\n  const MediaViewerPage({\r\n    super.key,\r\n  });\r\n\r\n  @override\r\n  State<MediaViewerPage> createState() => _MediaViewerPageState();\r\n}\r\n\r\nclass _MediaViewerPageState extends State<MediaViewerPage> {\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        elevation: 0,\r\n      ),\r\n      ),\r\n            child: AspectRatio(\r\n                      setState(() {\r\n                      });\r\n                    },\r\n                child: Icon(\r\n              ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/main/media_viewer_page.dart b/lib/screens/main/media_viewer_page.dart
--- a/lib/screens/main/media_viewer_page.dart	(revision 65f9e8488518a7c21e511167de144bbcd47903b9)
+++ b/lib/screens/main/media_viewer_page.dart	(date 1756713244040)
@@ -1,11 +1,17 @@
 import 'package:flutter/material.dart';
+import 'package:cortex_ai_gallery/models/media_item.dart';
 import 'package:photo_view/photo_view.dart';
+import 'package:photo_view/photo_view_gallery.dart';
 import 'package:video_player/video_player.dart';
 
 class MediaViewerPage extends StatefulWidget {
+  final List<MediaItem> mediaItems;
+  final int initialIndex;
 
   const MediaViewerPage({
     super.key,
+    required this.mediaItems,
+    required this.initialIndex,
   });
 
   @override
@@ -13,30 +19,142 @@
 }
 
 class _MediaViewerPageState extends State<MediaViewerPage> {
+  late PageController _pageController;
 
   @override
   void initState() {
     super.initState();
+    _pageController = PageController(initialPage: widget.initialIndex);
   }
 
   @override
   void dispose() {
+    _pageController.dispose();
     super.dispose();
   }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
+      extendBodyBehindAppBar: true,
       appBar: AppBar(
+        backgroundColor: Colors.transparent,
         elevation: 0,
       ),
+      body: PhotoViewGallery.builder(
+        itemCount: widget.mediaItems.length,
+        builder: (context, index) {
+          final mediaItem = widget.mediaItems[index];
+          if (mediaItem.fileType == 'video') {
+            return PhotoViewGalleryPageOptions.customChild(
+              child: VideoPlayerWidget(mediaItem: mediaItem),
+              heroAttributes: PhotoViewHeroAttributes(tag: mediaItem.id),
+              minScale: PhotoViewComputedScale.contained,
+              maxScale: PhotoViewComputedScale.covered,
+            );
+          } else {
+            return PhotoViewGalleryPageOptions(
+              imageProvider: NetworkImage(mediaItem.mediaUrl),
+              initialScale: PhotoViewComputedScale.contained,
+              heroAttributes: PhotoViewHeroAttributes(tag: mediaItem.id),
+              minScale: PhotoViewComputedScale.contained,
+              maxScale: PhotoViewComputedScale.covered * 4.0,
+            );
+          }
+        },
+        scrollPhysics: const BouncingScrollPhysics(),
+        backgroundDecoration: const BoxDecoration(color: Colors.black),
+        pageController: _pageController,
       ),
+    );
+  }
+}
+
+class VideoPlayerWidget extends StatefulWidget {
+  final MediaItem mediaItem;
+  const VideoPlayerWidget({super.key, required this.mediaItem});
+
+  @override
+  State<VideoPlayerWidget> createState() => _VideoPlayerWidgetState();
+}
+
+class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
+  late VideoPlayerController _controller;
+  late Future<void> _initializeVideoPlayerFuture;
+
+  @override
+  void initState() {
+    super.initState();
+    _controller = VideoPlayerController.networkUrl(Uri.parse(widget.mediaItem.mediaUrl));
+    _initializeVideoPlayerFuture = _controller.initialize();
+    _controller.setLooping(true);
+  }
+
+  @override
+  void dispose() {
+    _controller.dispose();
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return FutureBuilder(
+      future: _initializeVideoPlayerFuture,
+      builder: (context, snapshot) {
+        if (snapshot.connectionState == ConnectionState.done) {
+          return Center(
             child: AspectRatio(
+              aspectRatio: _controller.value.aspectRatio,
+              child: Stack(
+                alignment: Alignment.bottomCenter,
+                children: <Widget>[
+                  VideoPlayer(_controller),
+                  GestureDetector(
+                    onTap: () {
                       setState(() {
+                        _controller.value.isPlaying
+                            ? _controller.pause()
+                            : _controller.play();
                       });
                     },
+                  ),
+                  VideoProgressIndicator(_controller, allowScrubbing: true),
+                  _PlayPauseOverlay(controller: _controller),
+                ],
+              ),
+            ),
+          );
+        } else {
+          return const Center(child: CircularProgressIndicator());
+        }
+      },
+    );
+  }
+}
+
+class _PlayPauseOverlay extends StatelessWidget {
+  const _PlayPauseOverlay({required this.controller});
+
+  final VideoPlayerController controller;
+
+  @override
+  Widget build(BuildContext context) {
+    return AnimatedSwitcher(
+      duration: const Duration(milliseconds: 50),
+      reverseDuration: const Duration(milliseconds: 200),
+      child: controller.value.isPlaying
+          ? const SizedBox.shrink()
+          : Container(
+              color: Colors.black26,
+              child: const Center(
                 child: Icon(
+                  Icons.play_arrow,
+                  color: Colors.white,
+                  size: 100.0,
+                  semanticLabel: 'Play',
+                ),
               ),
+            ),
     );
   }
 }
Index: lib/services/api_service.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:io';\r\nimport 'package:dio/dio.dart';\r\nimport 'package:cortex_ai_gallery/models/media_item.dart';\r\nimport 'package:cortex_ai_gallery/models/person.dart';\r\n\r\nclass ApiService {\r\n  final Dio _dio = Dio();\r\n  // IMPORTANT: Replace with your actual backend URL\r\n  static const String _baseUrl = 'http://192.168.0.140:8000'; // 10.0.2.2 for Android emulator\r\n\r\n  ApiService() {\r\n    _dio.options.baseUrl = _baseUrl;\r\n    _dio.options.connectTimeout = const Duration(seconds: 15);\r\n    _dio.options.receiveTimeout = const Duration(seconds: 15);\r\n  }\r\n\r\n  Future<List<MediaItem>> getMedia({int limit = 50, int offset = 0}) async {\r\n    try {\r\n      final response = await _dio.get('/media', queryParameters: {'limit': limit, 'offset': offset});\r\n      return (response.data as List).map((json) => MediaItem.fromJson(json)).toList();\r\n    } catch (e) {\r\n      print('Error fetching media: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<List<Person>> getPeople() async {\r\n    try {\r\n      final response = await _dio.get('/people');\r\n      return (response.data as List).map((json) => Person.fromJson(json)).toList();\r\n    } catch (e) {\r\n      print('Error fetching people: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<List<MediaItem>> getMediaForPerson(String personId) async {\r\n    try {\r\n      final response = await _dio.get('/people/$personId');\r\n      return (response.data as List)\r\n          .map((json) => MediaItem.fromJson(json))\r\n          .toList();\r\n    } catch (e) {\r\n      print('Error fetching media for person $personId: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<bool> updatePersonName(String personId, String name) async {\r\n    try {\r\n      final response = await _dio.put(\r\n        '/people/$personId/name',\r\n        data: {'name': name},\r\n      );\r\n      return response.statusCode == 200;\r\n    } catch (e) {\r\n      print('Error updating person name for $personId: $e');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<List<String>> checkHashes(List<String> hashes) async {\r\n    try {\r\n      final response = await _dio.post('/upload/check-hashes', data: {'hashes': hashes});\r\n      return List<String>.from(response.data['needed_hashes']);\r\n    } catch (e) {\r\n      print('Error checking hashes: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<bool> uploadFiles(List<File> files) async {\r\n    try {\r\n      final formData = FormData();\r\n      for (var file in files) {\r\n        formData.files.add(MapEntry('files', await MultipartFile.fromFile(file.path)));\r\n      }\r\n      final response = await _dio.post('/upload', data: formData);\r\n      return response.statusCode == 202;\r\n    } catch (e) {\r\n      print('Error uploading files: $e');\r\n      return false;\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/services/api_service.dart b/lib/services/api_service.dart
--- a/lib/services/api_service.dart	(revision 65f9e8488518a7c21e511167de144bbcd47903b9)
+++ b/lib/services/api_service.dart	(date 1756713301998)
@@ -46,19 +46,6 @@
     }
   }
 
-  Future<bool> updatePersonName(String personId, String name) async {
-    try {
-      final response = await _dio.put(
-        '/people/$personId/name',
-        data: {'name': name},
-      );
-      return response.statusCode == 200;
-    } catch (e) {
-      print('Error updating person name for $personId: $e');
-      return false;
-    }
-  }
-
   Future<List<String>> checkHashes(List<String> hashes) async {
     try {
       final response = await _dio.post('/upload/check-hashes', data: {'hashes': hashes});
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>name: cortex_ai_gallery\r\ndescription: \"An intelligent AI-powered photo gallery.\"\r\npublish_to: 'none'\r\nversion: 1.0.0+1\r\n\r\nenvironment:\r\n  sdk: '>=3.2.0 <4.0.0'\r\n\r\ndependencies:\r\n  flutter:\r\n    sdk: flutter\r\n\r\n  # Core Packages\r\n  firebase_core: ^3.1.1\r\n  firebase_auth: ^5.1.1\r\n  dio: ^5.4.3+1\r\n  provider: ^6.1.2\r\n\r\n  # UI & Widgets\r\n  flutter_staggered_grid_view: ^0.7.0\r\n  cached_network_image: ^3.3.1 # ADD THIS PACKAGE\r\n  photo_view: ^0.15.0\r\n  video_player: ^2.8.6\r\n\r\n  # File System & Utilities\r\n  path_provider: ^2.1.3\r\n  file_picker: ^8.0.3\r\n  watcher: ^1.1.0\r\n  crypto: ^3.0.3\r\n  shared_preferences: ^2.2.3\r\n\r\n  # Code Generation Support\r\n  json_annotation: ^4.9.0\r\n  path: any\r\n\r\ndev_dependencies:\r\n  flutter_test:\r\n    sdk: flutter\r\n\r\n  # Linting\r\n  flutter_lints: ^3.0.0\r\n\r\n  # Code Generators\r\n  build_runner: ^2.4.10\r\n  json_serializable: ^6.8.0\r\n  # isar_generator has been removed
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
--- a/pubspec.yaml	(revision 65f9e8488518a7c21e511167de144bbcd47903b9)
+++ b/pubspec.yaml	(date 1756713244022)
@@ -20,7 +20,6 @@
   flutter_staggered_grid_view: ^0.7.0
   cached_network_image: ^3.3.1 # ADD THIS PACKAGE
   photo_view: ^0.15.0
-  video_player: ^2.8.6
 
   # File System & Utilities
   path_provider: ^2.1.3
diff --git a/lib/screens/main/photo_view_page.dart b/lib/screens/main/photo_view_page.dart
new file mode 100644
