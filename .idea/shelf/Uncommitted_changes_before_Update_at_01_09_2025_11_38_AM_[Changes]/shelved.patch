Index: lib/screens/main/media_viewer_page.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport 'package:photo_view/photo_view.dart';\r\nimport 'package:video_player/video_player.dart';\r\n\r\nclass MediaViewerPage extends StatefulWidget {\r\n\r\n  const MediaViewerPage({\r\n    super.key,\r\n  });\r\n\r\n  @override\r\n  State<MediaViewerPage> createState() => _MediaViewerPageState();\r\n}\r\n\r\nclass _MediaViewerPageState extends State<MediaViewerPage> {\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        elevation: 0,\r\n      ),\r\n      ),\r\n            child: AspectRatio(\r\n                      setState(() {\r\n                      });\r\n                    },\r\n                child: Icon(\r\n              ),\r\n    );\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/screens/main/media_viewer_page.dart b/lib/screens/main/media_viewer_page.dart
--- a/lib/screens/main/media_viewer_page.dart	(revision feb4f6c07c7b1084d6e2254eec11bb5d112b2af8)
+++ b/lib/screens/main/media_viewer_page.dart	(date 1756715394205)
@@ -1,11 +1,17 @@
 import 'package:flutter/material.dart';
+import 'package:cortex_ai_gallery/models/media_item.dart';
 import 'package:photo_view/photo_view.dart';
+import 'package:photo_view/photo_view_gallery.dart';
 import 'package:video_player/video_player.dart';
 
 class MediaViewerPage extends StatefulWidget {
+  final List<MediaItem> mediaItems;
+  final int initialIndex;
 
   const MediaViewerPage({
     super.key,
+    required this.mediaItems,
+    required this.initialIndex,
   });
 
   @override
@@ -13,30 +19,142 @@
 }
 
 class _MediaViewerPageState extends State<MediaViewerPage> {
+  late PageController _pageController;
 
   @override
   void initState() {
     super.initState();
+    _pageController = PageController(initialPage: widget.initialIndex);
   }
 
   @override
   void dispose() {
+    _pageController.dispose();
     super.dispose();
   }
 
   @override
   Widget build(BuildContext context) {
     return Scaffold(
+      extendBodyBehindAppBar: true,
       appBar: AppBar(
+        backgroundColor: Colors.transparent,
         elevation: 0,
       ),
+      body: PhotoViewGallery.builder(
+        itemCount: widget.mediaItems.length,
+        builder: (context, index) {
+          final mediaItem = widget.mediaItems[index];
+          if (mediaItem.fileType == 'video') {
+            return PhotoViewGalleryPageOptions.customChild(
+              child: VideoPlayerWidget(mediaItem: mediaItem),
+              heroAttributes: PhotoViewHeroAttributes(tag: mediaItem.id),
+              minScale: PhotoViewComputedScale.contained,
+              maxScale: PhotoViewComputedScale.covered,
+            );
+          } else {
+            return PhotoViewGalleryPageOptions(
+              imageProvider: NetworkImage(mediaItem.mediaUrl),
+              initialScale: PhotoViewComputedScale.contained,
+              heroAttributes: PhotoViewHeroAttributes(tag: mediaItem.id),
+              minScale: PhotoViewComputedScale.contained,
+              maxScale: PhotoViewComputedScale.covered * 4.0,
+            );
+          }
+        },
+        scrollPhysics: const BouncingScrollPhysics(),
+        backgroundDecoration: const BoxDecoration(color: Colors.black),
+        pageController: _pageController,
       ),
+    );
+  }
+}
+
+class VideoPlayerWidget extends StatefulWidget {
+  final MediaItem mediaItem;
+  const VideoPlayerWidget({super.key, required this.mediaItem});
+
+  @override
+  State<VideoPlayerWidget> createState() => _VideoPlayerWidgetState();
+}
+
+class _VideoPlayerWidgetState extends State<VideoPlayerWidget> {
+  late VideoPlayerController _controller;
+  late Future<void> _initializeVideoPlayerFuture;
+
+  @override
+  void initState() {
+    super.initState();
+    _controller = VideoPlayerController.networkUrl(Uri.parse(widget.mediaItem.mediaUrl));
+    _initializeVideoPlayerFuture = _controller.initialize();
+    _controller.setLooping(true);
+  }
+
+  @override
+  void dispose() {
+    _controller.dispose();
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    return FutureBuilder(
+      future: _initializeVideoPlayerFuture,
+      builder: (context, snapshot) {
+        if (snapshot.connectionState == ConnectionState.done) {
+          return Center(
             child: AspectRatio(
+              aspectRatio: _controller.value.aspectRatio,
+              child: Stack(
+                alignment: Alignment.bottomCenter,
+                children: <Widget>[
+                  VideoPlayer(_controller),
+                  GestureDetector(
+                    onTap: () {
                       setState(() {
+                        _controller.value.isPlaying
+                            ? _controller.pause()
+                            : _controller.play();
                       });
                     },
+                  ),
+                  VideoProgressIndicator(_controller, allowScrubbing: true),
+                  _PlayPauseOverlay(controller: _controller),
+                ],
+              ),
+            ),
+          );
+        } else {
+          return const Center(child: CircularProgressIndicator());
+        }
+      },
+    );
+  }
+}
+
+class _PlayPauseOverlay extends StatelessWidget {
+  const _PlayPauseOverlay({required this.controller});
+
+  final VideoPlayerController controller;
+
+  @override
+  Widget build(BuildContext context) {
+    return AnimatedSwitcher(
+      duration: const Duration(milliseconds: 50),
+      reverseDuration: const Duration(milliseconds: 200),
+      child: controller.value.isPlaying
+          ? const SizedBox.shrink()
+          : Container(
+              color: Colors.black26,
+              child: const Center(
                 child: Icon(
+                  Icons.play_arrow,
+                  color: Colors.white,
+                  size: 100.0,
+                  semanticLabel: 'Play',
+                ),
               ),
+            ),
     );
   }
 }
Index: lib/services/api_service.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:io';\r\nimport 'package:dio/dio.dart';\r\nimport 'package:cortex_ai_gallery/models/media_item.dart';\r\nimport 'package:cortex_ai_gallery/models/person.dart';\r\n\r\nclass ApiService {\r\n  final Dio _dio = Dio();\r\n  // IMPORTANT: Replace with your actual backend URL\r\n  static const String _baseUrl = 'http://192.168.0.140:8000'; // 10.0.2.2 for Android emulator\r\n\r\n  ApiService() {\r\n    _dio.options.baseUrl = _baseUrl;\r\n    _dio.options.connectTimeout = const Duration(seconds: 15);\r\n    _dio.options.receiveTimeout = const Duration(seconds: 15);\r\n  }\r\n\r\n  Future<List<MediaItem>> getMedia({int limit = 50, int offset = 0}) async {\r\n    try {\r\n      final response = await _dio.get('/media', queryParameters: {'limit': limit, 'offset': offset});\r\n      return (response.data as List).map((json) => MediaItem.fromJson(json)).toList();\r\n    } catch (e) {\r\n      print('Error fetching media: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<List<Person>> getPeople() async {\r\n    try {\r\n      final response = await _dio.get('/people');\r\n      return (response.data as List).map((json) => Person.fromJson(json)).toList();\r\n    } catch (e) {\r\n      print('Error fetching people: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<List<MediaItem>> getMediaForPerson(String personId) async {\r\n    try {\r\n      final response = await _dio.get('/people/$personId');\r\n      return (response.data as List)\r\n          .map((json) => MediaItem.fromJson(json))\r\n          .toList();\r\n    } catch (e) {\r\n      print('Error fetching media for person $personId: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<bool> updatePersonName(String personId, String name) async {\r\n    try {\r\n      final response = await _dio.put(\r\n        '/people/$personId/name',\r\n        data: {'name': name},\r\n      );\r\n      return response.statusCode == 200;\r\n    } catch (e) {\r\n      print('Error updating person name for $personId: $e');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  Future<List<String>> checkHashes(List<String> hashes) async {\r\n    try {\r\n      final response = await _dio.post('/upload/check-hashes', data: {'hashes': hashes});\r\n      return List<String>.from(response.data['needed_hashes']);\r\n    } catch (e) {\r\n      print('Error checking hashes: $e');\r\n      return [];\r\n    }\r\n  }\r\n\r\n  Future<bool> uploadFiles(List<File> files) async {\r\n    try {\r\n      final formData = FormData();\r\n      for (var file in files) {\r\n        formData.files.add(MapEntry('files', await MultipartFile.fromFile(file.path)));\r\n      }\r\n      final response = await _dio.post('/upload', data: formData);\r\n      return response.statusCode == 202;\r\n    } catch (e) {\r\n      print('Error uploading files: $e');\r\n      return false;\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/services/api_service.dart b/lib/services/api_service.dart
--- a/lib/services/api_service.dart	(revision feb4f6c07c7b1084d6e2254eec11bb5d112b2af8)
+++ b/lib/services/api_service.dart	(date 1756715394216)
@@ -46,19 +46,6 @@
     }
   }
 
-  Future<bool> updatePersonName(String personId, String name) async {
-    try {
-      final response = await _dio.put(
-        '/people/$personId/name',
-        data: {'name': name},
-      );
-      return response.statusCode == 200;
-    } catch (e) {
-      print('Error updating person name for $personId: $e');
-      return false;
-    }
-  }
-
   Future<List<String>> checkHashes(List<String> hashes) async {
     try {
       final response = await _dio.post('/upload/check-hashes', data: {'hashes': hashes});
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>name: cortex_ai_gallery\r\ndescription: \"An intelligent AI-powered photo gallery.\"\r\npublish_to: 'none'\r\nversion: 1.0.0+1\r\n\r\nenvironment:\r\n  sdk: '>=3.2.0 <4.0.0'\r\n\r\ndependencies:\r\n  flutter:\r\n    sdk: flutter\r\n\r\n  # Core Packages\r\n  firebase_core: ^3.1.1\r\n  firebase_auth: ^5.1.1\r\n  dio: ^5.4.3+1\r\n  provider: ^6.1.2\r\n\r\n  # UI & Widgets\r\n  flutter_staggered_grid_view: ^0.7.0\r\n  cached_network_image: ^3.3.1 # ADD THIS PACKAGE\r\n  photo_view: ^0.15.0\r\n  video_player: ^2.8.6\r\n\r\n  # File System & Utilities\r\n  path_provider: ^2.1.3\r\n  file_picker: ^8.0.3\r\n  watcher: ^1.1.0\r\n  crypto: ^3.0.3\r\n  shared_preferences: ^2.2.3\r\n\r\n  # Code Generation Support\r\n  json_annotation: ^4.9.0\r\n  path: any\r\n\r\ndev_dependencies:\r\n  flutter_test:\r\n    sdk: flutter\r\n\r\n  # Linting\r\n  flutter_lints: ^3.0.0\r\n\r\n  # Code Generators\r\n  build_runner: ^2.4.10\r\n  json_serializable: ^6.8.0\r\n  # isar_generator has been removed
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
--- a/pubspec.yaml	(revision feb4f6c07c7b1084d6e2254eec11bb5d112b2af8)
+++ b/pubspec.yaml	(date 1756715394226)
@@ -20,7 +20,6 @@
   flutter_staggered_grid_view: ^0.7.0
   cached_network_image: ^3.3.1 # ADD THIS PACKAGE
   photo_view: ^0.15.0
-  video_player: ^2.8.6
 
   # File System & Utilities
   path_provider: ^2.1.3
diff --git a/lib/screens/main/photo_view_page.dart b/lib/screens/main/photo_view_page.dart
new file mode 100644
